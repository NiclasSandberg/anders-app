{"version":3,"sources":["components/Footer/Footer.module.css","components/Navigation/Toolbar.module.css","components/Navigation/MobileNav/DrawerToggleButton.module.css","components/Navigation/MobileNav/SideDrawer.module.css","App.module.css","components/Navigation/MobileNav/DrawerToggleButton.js","components/Navigation/NavBar.js","components/Footer/Footer.jsx","components/Navigation/MobileNav/SideDrawer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","drawerToggleButton","props","changeColor","burgerColorToggle","className","style","onClick","click","navBar","color","DrawerToggleButton","drawerClickHandler","newBurgerColor","href","Footer","styles","sideDrawer","App","state","sideDrawerOpen","drawerToggleClickHandler","setState","prevState","burgerColor","this","SideDrawer","NavBar","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,iBAAiB,iC,gBCAnCD,EAAOC,QAAU,CAAC,2BAA2B,0CAA0C,mBAAqB,sC,gBCA5GD,EAAOC,QAAU,CAAC,gBAAgB,0CAA0C,sBAAsB,gDAAgD,2BAA2B,uD,gBCA7KD,EAAOC,QAAU,CAAC,cAAc,gCAAgC,qBAAqB,yC,6ECArFD,EAAOC,QAAU,CAAC,OAAS,sB,6ICgBZC,EAda,SAAAC,GAEpB,IAAIC,EAAc,sBAIlB,OAHGD,EAAME,oBACDD,EAAc,4BAGtB,4BAAQE,UAAWC,IAAM,iBAAkBC,QAASL,EAAMM,OAC1D,yBAAKH,UAAWC,IAAMH,KACtB,yBAAKE,UAAWC,IAAMH,OCkBfM,EAvBA,SAAAP,GAAK,OAEhB,4BAAQG,UAAU,OACd,yBAAKA,UAAWC,IAAK,oBACnB,yBAAKD,UAAWC,IAAK,MAAWA,MAAO,CAACI,MAAM,UAA9C,iBAEA,kBAACC,EAAD,CAAoBH,MAAON,EAAMU,mBAAoBR,kBAAmBF,EAAMW,iBAE9E,yBAAKR,UAAWC,IAAM,6BACtB,4BACE,4BACE,uBAAGQ,KAAK,KAAR,WAEF,4BACE,uBAAGA,KAAK,KAAR,e,gBCDCC,MAhBf,WACE,OACE,yBAAKV,UAAU,OACb,gCACE,yBAAKA,UAAWW,IAAO,mBACrB,yBAAKX,UAAWW,IAAO,2BACrB,kDAAiB,6BAAjB,sBAEF,yBAAKX,UAAWW,IAAO,yBAAvB,IAAiD,iDACjD,yBAAKX,UAAWW,IAAO,yBAAvB,IAAiD,iD,wBCG5CC,EAbI,SAAAf,GAAK,OAGhB,yBAAKG,UAAWC,IAAM,gBAClB,wBAAID,UAAWC,IAAM,uBACjB,4BAAI,uBAAGQ,KAAK,IAAR,kBACJ,4BAAI,uBAAGA,KAAK,IAAR,WACJ,4BAAI,uBAAGA,KAAK,IAAR,cC+BLI,E,4MAlCbC,MAAQ,CACNC,gBAAgB,G,EAElBC,yBAA2B,WAEzB,EAAKC,UAAS,SAACC,GAEb,MAAO,CAACH,gBAAiBG,EAAUH,oB,uDAQrC,IAAIH,EACAO,EAQN,OAPMC,KAAKN,MAAMC,iBAEbH,EAAa,kBAACS,EAAD,MACbF,EAAc,SAKhB,yBAAKnB,UAAU,OACb,kBAACsB,EAAD,CAAQf,mBAAoBa,KAAKJ,yBAA0BR,eAAgBW,IAC1EP,EACD,kBAAC,EAAD,W,GA7BYW,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0537325a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer-content\":\"Footer_footer-content__3w6qt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar-navigation-items\":\"Toolbar_toolbar-navigation-items__25iZP\",\"toolbar_navigation\":\"Toolbar_toolbar_navigation__24RxH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggle-button\":\"DrawerToggleButton_toggle-button__1XMuh\",\"toggle-button__line\":\"DrawerToggleButton_toggle-button__line__2MRBE\",\"toggle-button__line_open\":\"DrawerToggleButton_toggle-button__line_open__1UVfH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"side-drawer\":\"SideDrawer_side-drawer__2_g0J\",\"side-drawer__items\":\"SideDrawer_side-drawer__items__1ImWG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fadein\":\"App_fadein__2fHYP\"};","import React from 'react'\r\nimport style from './DrawerToggleButton.module.css';\r\n\r\nconst drawerToggleButton =  props => {\r\n       \r\n        let changeColor = 'toggle-button__line';\r\n        if(props.burgerColorToggle){\r\n                changeColor = 'toggle-button__line_open'\r\n        }\r\n        return(\r\n        <button className={style[\"toggle-button\"]} onClick={props.click}>\r\n        <div className={style[changeColor]}></div>\r\n        <div className={style[changeColor]}></div>\r\n        </button>\r\n);};\r\n\r\n\r\nexport default drawerToggleButton;\r\n","import React from 'react'\r\nimport style from './Toolbar.module.css'\r\nimport './MobileNav/DrawerToggleButton';\r\nimport DrawerToggleButton from './MobileNav/DrawerToggleButton';\r\n\r\n\r\n\r\nconst navBar = props =>  (\r\n\r\n    <header className=\"App\">\r\n        <nav className={style[\"toolbar_navigation\"]}>\r\n          <div className={style[\"brand\"]} style={{color:\"white\"}}>ANDERS WADMAN</div>\r\n         \r\n          <DrawerToggleButton click={props.drawerClickHandler} burgerColorToggle={props.newBurgerColor}/>\r\n          \r\n          <div className={style[\"toolbar-navigation-items\"]}>\r\n          <ul>\r\n            <li>\r\n              <a href=\"#\">Studio</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#\">Space</a>\r\n            </li>\r\n          </ul>\r\n          </div>\r\n        </nav>\r\n      </header>\r\n      \r\n);\r\n\r\nexport default navBar;\r\n","import React from \"react\";\r\nimport styles from './Footer.module.css';\r\n\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"App\">\r\n      <footer>\r\n        <div className={styles['footer-content']}>\r\n          <div className={styles['footer-section address']}>\r\n            <p>Tranåsväg 48, <br /> 112 60 Stockholm</p>\r\n          </div>\r\n          <div className={styles['footer-section email']}> <p>anders@wadman.com</p></div>\r\n          <div className={styles['footer-section phone']}> <p>063-765 42 22</p></div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react'\r\nimport style from './SideDrawer.module.css';\r\n\r\nconst sideDrawer = props => (\r\n        \r\n\r\n        <nav className={style['side-drawer']}>\r\n            <ul className={style['side-drawer__items']}>\r\n                <li><a href=\"\">ANDERS WADMAN</a></li>\r\n                <li><a href=\"\">Studio</a></li>\r\n                <li><a href=\"\">Spaces</a></li>\r\n            </ul>\r\n        </nav>\r\n);\r\n\r\n\r\nexport default sideDrawer;\r\n","import React,  { Component } from 'react';\nimport NavBar from './components/Navigation/NavBar.js';\nimport Footer from './components/Footer/Footer';\nimport styles from './App.module.css';\nimport SideDrawer from './components/Navigation/MobileNav/SideDrawer.jsx';\n\nclass App extends Component {\n  state = {\n    sideDrawerOpen: false\n  };\n  drawerToggleClickHandler = () => {\n    //prevState is passed automatically by react\n    this.setState((prevState) => {\n      //sets to opposite of previous state\n      return {sideDrawerOpen: !prevState.sideDrawerOpen};\n    });\n  };  \n  \n  \n  \n  //genom att inte ha med drawertogl..hanlder() här nere med parentes enbart pass reference, not executed\n  render() {\n    let sideDrawer;\n    let burgerColor;\n    if (this.state.sideDrawerOpen){\n      \n      sideDrawer = <SideDrawer/>;\n      burgerColor = 'color';\n      \n    }\n                   \n  return (\n    <div className=\"App\">             \n      <NavBar drawerClickHandler={this.drawerToggleClickHandler} newBurgerColor={burgerColor}/>\n      {sideDrawer}\n      <Footer />\n      </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}