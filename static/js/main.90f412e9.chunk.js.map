{"version":3,"sources":["components/Navigation/MobileNav/DrawerToggleButton.module.css","components/Navigation/NavBar.module.css","components/Navigation/MobileNav/SideDrawer.module.css","components/Footer/Footer.module.css","fonts/futuran.TTF","components/Navigation/MobileNav/DrawerToggleButton.js","components/Navigation/NavBar.js","components/Footer/Footer.jsx","components/Navigation/MobileNav/SideDrawer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","drawerToggleButton","props","changeColor","rotate","burgerColorToggle","className","style","onClick","click","navBar","color","href","DrawerToggleButton","drawerClickHandler","newBurgerColor","Footer","styles","class","sideDrawer","borderTop","App","state","sideDrawerOpen","drawerToggleClickHandler","setState","prevState","burgerColor","this","SideDrawer","NavBar","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,gBAAgB,0CAA0C,sBAAsB,gDAAgD,2BAA2B,qDAAqD,SAAW,uC,gBCA7OD,EAAOC,QAAU,CAAC,2BAA2B,yCAAyC,mBAAqB,mCAAmC,MAAQ,wB,gBCAtJD,EAAOC,QAAU,CAAC,cAAc,gCAAgC,qBAAqB,uCAAuC,qBAAqB,yC,oBCAjJD,EAAOC,QAAU,CAAC,iBAAiB,+BAA+B,UAAU,0B,2FCD5ED,EAAOC,QAAU,IAA0B,qC,6ICoB5BC,EAjBa,SAAAC,GAGpB,IAAIC,EAAc,sBACdC,EAAS,MAKb,OAJGF,EAAMG,oBACDF,EAAc,2BACdC,EAAS,YAGjB,4BAAQE,UAAWC,IAAM,iBAAkBC,QAASN,EAAMO,OAC1D,yBAAKH,UAAS,UAAKC,IAAMJ,GAAX,YAA2BI,IAAMH,MAC/C,yBAAKE,UAAWC,IAAMJ,OCefO,EAvBA,SAAAR,GAAK,OAEhB,yBAAKI,UAAU,OACX,yBAAKA,UAAWC,IAAK,oBACnB,yBAAKD,UAAWC,IAAK,MAAWA,MAAO,CAACI,MAAM,YAAY,uBAAGC,KAAK,KAAR,4BAA1D,KAEA,kBAACC,EAAD,CAAoBJ,MAAOP,EAAMY,mBAAoBT,kBAAmBH,EAAMa,iBAE9E,yBAAKT,UAAWC,IAAM,6BACtB,4BACE,4BACE,uBAAGK,KAAK,KAAR,WAEF,4BACE,uBAAGA,KAAK,KAAR,e,gBCWCI,MA5Bf,WACE,OACE,yBAAKV,UAAU,OACb,gCACE,yBAAKA,UAAWW,IAAO,mBACrB,4CAAiB,wBAAIC,MAAM,YAA3B,eACA,mDAAwB,6BAAxB,sBAEE,6BACA,8BAAM,uBAAGN,KAAK,uBAAR,iBACN,6BACA,8BAAM,uBAAGA,KAAK,4BAAR,0BAER,8CAAmB,6BAAnB,sBAEE,6BACA,8BAAM,uBAAGA,KAAK,yBAAR,gBACN,6BACA,8BAAM,uBAAGA,KAAK,2BAAR,yBAER,sDAAqB,6BAArB,mBACkB,6BADlB,e,wBCLKO,EAhBI,SAAAjB,GAAK,OAGpB,yBAAKI,UAAWC,IAAM,gBAClB,wBAAID,UAAWC,IAAM,uBAClB,4BACI,uBAAGK,KAAK,IAAR,8BAEP,wBAAIN,UAAWC,IAAM,uBACjB,wBAAIA,MAAO,CAACa,UAAW,sBAAsB,uBAAGR,KAAK,IAAR,WAC7C,4BAAI,uBAAGA,KAAK,IAAR,aC+BDS,E,4MArCbC,MAAQ,CACNC,gBAAgB,G,EAElBC,yBAA2B,WAEzB,EAAKC,UAAS,SAACC,GAEb,MAAO,CAACH,gBAAiBG,EAAUH,oB,uDAQrC,IAAIJ,EACAQ,EAQN,OAPMC,KAAKN,MAAMC,iBAEbJ,EAAa,kBAACU,EAAD,MACbF,EAAc,SAKhB,yBAAKrB,UAAU,OAEb,gCACA,kBAACwB,EAAD,CAAQhB,mBAAoBc,KAAKJ,yBAA0BT,eAAgBY,KAE1ER,EACD,kBAAC,EAAD,W,GAhCYY,a,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90f412e9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggle-button\":\"DrawerToggleButton_toggle-button__1XMuh\",\"toggle-button__line\":\"DrawerToggleButton_toggle-button__line__2MRBE\",\"toggle-button__line_open\":\"DrawerToggleButton_toggle-button__line_open__1UVfH\",\"top_open\":\"DrawerToggleButton_top_open__2FGyS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolbar-navigation-items\":\"NavBar_toolbar-navigation-items__-GHDb\",\"toolbar_navigation\":\"NavBar_toolbar_navigation__sLnde\",\"brand\":\"NavBar_brand__1GZ64\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"side-drawer\":\"SideDrawer_side-drawer__2_g0J\",\"side-drawer__items\":\"SideDrawer_side-drawer__items__1ImWG\",\"side-drawer__brand\":\"SideDrawer_side-drawer__brand__2S4xX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer-content\":\"Footer_footer-content__3w6qt\",\"hide-br\":\"Footer_hide-br__-DP0o\"};","module.exports = __webpack_public_path__ + \"static/media/futuran.f9f02ed0.TTF\";","import React from 'react'\r\nimport style from './DrawerToggleButton.module.css';\r\n\r\nconst drawerToggleButton =  props => {\r\n        \r\n        \r\n        let changeColor = 'toggle-button__line';\r\n        let rotate = 'top';\r\n        if(props.burgerColorToggle){\r\n                changeColor = 'toggle-button__line_open';\r\n                rotate = 'top_open';\r\n        }\r\n        return(\r\n        <button className={style[\"toggle-button\"]} onClick={props.click}>\r\n        <div className={`${style[changeColor]} ${style[rotate]}`}></div>\r\n        <div className={style[changeColor]}></div>\r\n        </button>\r\n);};\r\n\r\n\r\nexport default drawerToggleButton;\r\n","import React from 'react'\r\nimport style from './NavBar.module.css';\r\nimport './MobileNav/DrawerToggleButton';\r\nimport DrawerToggleButton from './MobileNav/DrawerToggleButton';\r\n\r\n\r\n\r\nconst navBar = props =>  (\r\n\r\n    <nav className=\"App\">\r\n        <nav className={style[\"toolbar_navigation\"]}>\r\n          <div className={style[\"brand\"]} style={{color:\"#808080\"}}><a href=\"#\">Curman Wadman Architects</a> </div>\r\n         \r\n          <DrawerToggleButton click={props.drawerClickHandler} burgerColorToggle={props.newBurgerColor}/>\r\n          \r\n          <div className={style[\"toolbar-navigation-items\"]}>\r\n          <ul>\r\n            <li>\r\n              <a href=\"#\">Studio</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#\">Space</a>\r\n            </li>\r\n          </ul>\r\n          </div>\r\n        </nav>\r\n      </nav>\r\n      \r\n);\r\n\r\nexport default navBar;\r\n","import React from \"react\";\r\nimport styles from './Footer.module.css';\r\n\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"App\">\r\n      <footer>\r\n        <div className={styles['footer-content']}>\r\n          <p>Curman Wadman <br class=\"hide-br\"></br> Architects</p>\r\n          <p>Anders Curman Wadman <br />\r\n             Architect SAR / MSA\r\n            <br />\r\n            <span><a href=\"mailto:acw@cwarc.se\">acw@cwarc.se</a></span>\r\n            <br />\r\n            <span><a href=\"tel:+46-(0)-76-203 07 58\">+46-(0)-76-203 07 58</a></span>\r\n          </p>\r\n          <p>Birgitta Wadman <br />\r\n             Architect SAR / MSA\r\n            <br />\r\n            <span><a href=\"mailto:bw@cwarc.se.se\">bw@cwarc.se</a></span>\r\n            <br />\r\n            <span><a href=\"tel:+46-(0)76-253 04 08\">+46-(0)76-253 04 08</a></span>\r\n          </p>\r\n          <p>Grenadjärsvägen 6 <br />\r\n            185 41 Vaxholm  <br />Sweden </p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react'\r\nimport style from './SideDrawer.module.css';\r\n\r\nconst sideDrawer = props => (\r\n\r\n\r\n    <nav className={style['side-drawer']}>\r\n        <ul className={style['side-drawer__brand']}>\r\n           <li>\r\n               <a href=\"\">Curman Wadman Architects</a></li>\r\n        </ul>\r\n        <ul className={style['side-drawer__items']}>\r\n            <li style={{borderTop: \"1px solid #a2a2a2\"}}><a href=\"\">Studio</a></li>\r\n            <li><a href=\"\">Space</a></li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\n\r\nexport default sideDrawer;\r\n","import React,  { Component } from 'react';\nimport NavBar from './components/Navigation/NavBar.js';\nimport Footer from './components/Footer/Footer';\nimport styles from './App.module.css';\nimport SideDrawer from './components/Navigation/MobileNav/SideDrawer.jsx';\n\nclass App extends Component {\n  state = {\n    sideDrawerOpen: false\n  };\n  drawerToggleClickHandler = () => {\n    //prevState is passed automatically by react\n    this.setState((prevState) => {\n      //sets to opposite of previous state\n      return {sideDrawerOpen: !prevState.sideDrawerOpen};\n    });\n  };  \n  \n  \n  \n  //genom att inte ha med drawertogl..hanlder() här nere med parentes enbart pass reference, not executed\n  render() {\n    let sideDrawer;\n    let burgerColor;\n    if (this.state.sideDrawerOpen){\n      \n      sideDrawer = <SideDrawer/>;\n      burgerColor = 'color';\n      \n    }\n                   \n  return (\n    <div className=\"App\">             \n      \n      <header>\n      <NavBar drawerClickHandler={this.drawerToggleClickHandler} newBurgerColor={burgerColor}/>\n      </header>\n      {sideDrawer}\n      <Footer />\n      </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './fonts/futuran.TTF';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}